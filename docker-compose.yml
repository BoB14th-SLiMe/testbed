services:
  plc1:
    build:
      context: .
      dockerfile: ./settings/plc/plc.Dockerfile
    image: testbed-plc:latest
    container_name: plc1
    networks:
      - poc
    ports:
      - "1881:1880"
      - "502:502"
    volumes:
      - ./settings/plc/plc1:/data
  
  plc2:
    image: testbed-plc:latest
    container_name: plc2
    networks:
      - poc
    ports:
      - "1882:1880"
      - "503:502"
    volumes:
      - ./settings/plc/plc2:/data

  plc3:
    # build 섹션을 삭제하고, 위에서 빌드한 이미지를 사용하도록 지정합니다.
    image: testbed-plc:latest
    container_name: plc3
    networks:
      - poc
    ports:
      - "1883:1880"
      - "504:502"
    volumes:
      - ./settings/plc/plc3:/data

  plc4:
    # build 섹션을 삭제하고, 위에서 빌드한 이미지를 사용하도록 지정합니다.
    image: testbed-plc:latest
    container_name: plc4
    networks:
      - poc
    ports:
      - "1884:1880"
      - "505:502"
    volumes:
      - ./settings/plc/plc4:/data

  scada:
    build:
      context: .
      dockerfile: ./settings/scada/scada.Dockerfile
    container_name: scada
    networks:
      - poc
    ports:
      - "1880:1880"
    volumes:
      - ./settings/scada:/data
    depends_on:
      - plc1
      - plc2
      - plc3
      - plc4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1880"]
      interval: 10s
      timeout: 5s
      retries: 5

  capture:
    image: nicolaka/netshoot
    cap_add:
      - NET_ADMIN
    network_mode: "service:scada"
    volumes:
      - ./pcap:/pcap
    command: ["tshark", "-l", "-i", "eth0", "-w", "/pcap/output.pcap"]
    depends_on:
      scada:
       condition: service_healthy

networks:
  poc:
    external: true